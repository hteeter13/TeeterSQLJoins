-- Part Two
USE sakila;
-- 1. List the number of films per category.
SELECT *, COUNT(title)
FROM film
INNER JOIN film_category
USING (film_id)
JOIN category
USING (category_id)
GROUP BY name
ORDER BY COUNT(title) DESC;
-- 74 Sports films
-- 51 Music films

-- 2. Retrieve the store ID, city, and country for each store.
SELECT * FROM store
JOIN address
USING (address_id);
-- Canada
-- Australia

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT *, SUM(amount) AS 'Total Income'
FROM payment
JOIN customer
USING (customer_id)
INNER JOIN address
USING (address_id)
GROUP BY store_id
ORDER BY 'Total Income' DESC;
-- Store #1 : 36,997.53
-- Store #2 : 30,409.03

-- 4. Determine the average running time of films for each category.
SELECT *, AVG(length) AS 'avg_duration'
FROM film
JOIN film_category
USING (film_id)
RIGHT JOIN category
USING (category_id)
GROUP BY name;

-- Bonus
-- 5. Identify the film categories with the longest average running time.
SELECT *, AVG(length) AS 'avg_duration'
FROM film
JOIN film_category
USING (film_id)
RIGHT JOIN category
USING (category_id)
GROUP BY name
ORDER BY avg_duration DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.



-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.



-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."


